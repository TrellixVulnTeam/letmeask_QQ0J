{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vnn20\\\\nlw-together\\\\letmeask\\\\src\\\\pages\\\\Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../Components/Button';\nimport { RoomCode } from '../Components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.once('value', room => {\n      const databaseRoom = room.val();\n      const firebaseQuestions = databaseRoom.questions;\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered\n        };\n      });\n      console.log(parsedQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sala React\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"4 perguntas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntar?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \" fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 43\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Room, \"/Cy9JTrx4j3AAi323Vd92LDGD9Y=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/Users/vnn20/nlw-together/letmeask/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","Button","RoomCode","useAuth","database","Room","user","params","newQuestion","setNewQuestion","roomId","id","roomRef","ref","once","room","databaseRoom","val","firebaseQuestions","questions","parsedQuestions","Object","entries","map","key","value","content","author","isHighlighted","isAnswered","console","log","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","push","logoImg","target"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../Components/Button';\r\nimport { RoomCode } from '../Components/RoomCode';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\ntype FirebaseQuestions = Record<\r\n  string,\r\n  {\r\n    author: {\r\n      name: string;\r\n      avatar: string;\r\n    };\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighlighted: boolean;\r\n  }\r\n>;\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n};\r\n\r\nexport function Room() {\r\n  const { user } = useAuth();\r\n  const params = useParams<RoomParams>();\r\n  const [newQuestion, setNewQuestion] = useState('');\r\n\r\n  const roomId = params.id;\r\n\r\n  useEffect(() => {\r\n    const roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n    roomRef.once('value', (room) => {\r\n      const databaseRoom = room.val();\r\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions;\r\n\r\n      const parsedQuestions = Object.entries(firebaseQuestions).map(\r\n        ([key, value]) => {\r\n          return {\r\n            id: key,\r\n            content: value.content,\r\n            author: value.author,\r\n            isHighlighted: value.isHighlighted,\r\n            isAnswered: value.isAnswered,\r\n          };\r\n        }\r\n      );\r\n\r\n      console.log(parsedQuestions);\r\n    });\r\n  }, [roomId]);\r\n\r\n  async function handleSendQuestion(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (newQuestion.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      throw new Error('You must be logged in');\r\n    }\r\n\r\n    const question = {\r\n      content: newQuestion,\r\n      author: {\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n      },\r\n      isHighlighted: false,\r\n      isAnswered: false,\r\n    };\r\n\r\n    await database.ref(`rooms/${roomId}/questions`).push(question);\r\n\r\n    setNewQuestion('');\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"Letmeask\" />\r\n          <RoomCode code={roomId} />\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"content\">\r\n        <div className=\"room-title\">\r\n          <h1>Sala React</h1>\r\n          <span>4 perguntas</span>\r\n        </div>\r\n\r\n        <form onSubmit={handleSendQuestion}>\r\n          <textarea\r\n            placeholder=\"O que você quer perguntar?\"\r\n            onChange={(event) => setNewQuestion(event.target.value)}\r\n            value={newQuestion}\r\n          />\r\n\r\n          <div className=\"form-footer\">\r\n            {user ? (\r\n              <div className=\"user-info\">\r\n                <img src={user.avatar} alt={user.name} />\r\n                <span>{user.name}</span>\r\n              </div>\r\n            ) : (\r\n              <span>\r\n                Para enviar uma pergunta, <button> faça seu login</button>.\r\n              </span>\r\n            )}\r\n            <Button type=\"submit\" disabled={!user}>\r\n              Enviar pergunta\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}